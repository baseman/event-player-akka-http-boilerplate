group = "co.remotectrl.api"
version = "0.0.1-SNAPSHOT"

apply plugin: "java"
apply plugin: "com.google.cloud.tools.appengine"

apply plugin: "kotlin-spring"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

apply plugin: "kotlin-platform-jvm"
apply plugin: "org.junit.platform.gradle.plugin"

buildscript {
  ext {
    kotlinVersion = "1.3.10"
    springBootVersion = "2.0.3.RELEASE"
    akkaVersion = "10.1.4"
  }
  repositories {
    jcenter()
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven { url "http://repo.spring.io/plugins-release/" }
  }
  dependencies {
    classpath("com.google.cloud.tools:appengine-gradle-plugin:1.+")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.junit.platform:junit-platform-gradle-plugin:1.0.0")
  }
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

sourceCompatibility = 1.8

repositories {
  mavenCentral()

  maven { url "http://repo.maven.apache.org/maven2" }

  maven { url "http://dl.bintray.com/jetbrains/spek" }
  maven { url "http://repo.spring.io/plugins-release/" }
}

dependencies {
  compile("com.google.appengine:appengine-api-1.0-sdk:+")
  
  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
  compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")


  compile("org.springframework.boot:spring-boot-starter"){
    exclude(module: "jul-to-slf4j")
    exclude(module: "spring-boot-starter-tomcat")
  }

  compile("com.typesafe.akka:akka-http_2.12:${akkaVersion}")
  compile("com.typesafe.akka:akka-http-jackson_2.12:${akkaVersion}")
  compile("com.typesafe.akka:akka-stream_2.12:2.5.16")

  compile("com.github.swagger-akka-http:swagger-akka-http_2.12:1.0.0")
  compile("io.swagger:swagger-jaxrs:1.5.18")
  compile("ch.megard:akka-http-cors_2.12:0.3.0")

  expectedBy project(":event-player")
  compile project(":my-jvm")

  testCompile("com.typesafe.akka:akka-http-testkit_2.12:${akkaVersion}")
  testCompile("junit:junit:4.12")

  testCompile("org.springframework.boot:spring-boot-starter-test:2.0.5.RELEASE")
  testRuntime("org.junit.vintage:junit-vintage-engine:5.3.1")

}

test {
  useJUnitPlatform()
}

appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {
  deploy {

  }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/configs"
        }
    }
}

jar {
    manifest {}

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
